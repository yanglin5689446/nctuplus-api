require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe EventsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    FactoryBot.attributes_for :event
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EventsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response' do
      event = Event.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      event = Event.create! valid_attributes
      get :show, params: { id: event.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Event' do
        expect do
          post :create, params: { event: valid_attributes }, session: valid_session
        end.to change(Event, :count).by(1)
      end

      it 'renders a JSON response with the new event' do
        post :create, params: { event: valid_attributes }, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(event_url(Event.last))
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {{ title: :yee }}

      it 'updates the requested event' do
        event = Event.create! valid_attributes
        put :update, params: { id: event.to_param, event: new_attributes }, session: valid_session
        event.reload
        expect(event.title).to eq('yee')
      end

      it 'renders a JSON response with the event' do
        event = Event.create! valid_attributes

        put :update, params: { id: event.to_param, event: valid_attributes }, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested event' do
      event = Event.create! valid_attributes
      expect do
        delete :destroy, params: { id: event.to_param }, session: valid_session
      end.to change(Event, :count).by(-1)
    end
  end

  describe 'action' do
    let(:valid_action) {{ status: :follow }}
    let(:new_action) {{ status: :participate }}
    let(:invalid_action) {{ status: :yee }}
    let(:current_user) { FactoryBot.create :user }
    before(:each) do
      request.headers.merge! current_user.create_new_auth_token
      @event = Event.create! valid_attributes
    end

    context 'with valid params' do
      it 'renders a JSON response with new user event' do
        post :action, params: { event_id: @event.to_param, **valid_action }, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
      end

      it 'create user event' do
        post :action, params: { event_id: @event.to_param, **valid_action }, session: valid_session
        result = UsersEvent.where(user_id: current_user.id, event_id: @event.id).first
        expect(result).not_to be_nil
      end
      it 'update user event when user event already exists' do
        user_event = UsersEvent.create!(
          user_id: current_user.id,
          event_id: @event.id,
          status: valid_action[:status]
        )
        post :action, params: { event_id: @event.to_param, **new_action }, session: valid_session
        user_event.reload
        expect(user_event.status.to_sym).to eq(new_action[:status])
      end
      it 'delete user event' do
        user_event = UsersEvent.create!(
          user_id: current_user.id,
          event_id: @event.id,
          status: valid_action[:status]
        )
        delete :revoke_action, params: { event_id: @event.to_param }, session: valid_session
        result = UsersEvent.where(user_id: current_user.id, event_id: @event.id).first
        expect(result).to be_nil
      end
    end
    context 'with invalid params' do
      it 'would not create user event' do
        post :action, params: { event_id: @event.to_param, **invalid_action }, session: valid_session
        result = UsersEvent.where(user_id: current_user.id, event_id: @event.id).first
        expect(result).to be_nil
      end
    end
  end
end
